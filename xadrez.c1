#include <stdio.h>

/*
===========================================================
üß† DESAFIO FINAL: CRIANDO MOVIMENTOS COMPLEXOS
Simula√ß√£o avan√ßada de movimentos de pe√ßas de xadrez
===========================================================
- Torre, Bispo e Rainha ‚Üí recursividade
- Bispo ‚Üí tamb√©m usa loops aninhados dentro da recurs√£o
- Cavalo ‚Üí loops complexos com m√∫ltiplas vari√°veis, continue e break
===========================================================
*/

// ==============================
// üîÅ FUN√á√ïES RECURSIVAS
// ==============================

// --- Movimento da Torre (recursivo) ---
void moverTorre(int casas, int atual) {
    if (atual > casas) return; // caso base
    printf("Direita (casa %d)\n", atual);
    moverTorre(casas, atual + 1); // chamada recursiva
}

// --- Movimento do Bispo (recursivo + loops aninhados) ---
void moverBispo(int vertical, int horizontal) {
    if (vertical == 0) return; // caso base

    // loop externo ‚Üí movimento vertical
    for (int i = 1; i <= vertical; i++) {
        printf("Cima (%d)\n", i);

        // loop interno ‚Üí movimento horizontal
        for (int j = 1; j <= horizontal; j++) {
            printf("Direita (%d,%d)\n", i, j);
        }
    }

    // chamada recursiva para simular continua√ß√£o do movimento
    moverBispo(vertical - 1, horizontal);
}

// --- Movimento da Rainha (recursivo) ---
void moverRainha(int casas, int atual) {
    if (atual > casas) return; // caso base
    printf("Esquerda (casa %d)\n", atual);
    moverRainha(casas, atual + 1); // recurs√£o
}

// ==============================
// üê¥ MOVIMENTO COMPLEXO DO CAVALO
// ==============================
void moverCavalo() {
    int movimentoVertical = 2;  // duas casas para cima
    int movimentoHorizontal = 1; // uma casa para a direita

    printf("Movimento do CAVALO:\n");

    // loop externo ‚Üí movimento vertical
    for (int i = movimentoVertical; i >= 1; i--) {
        printf("Cima (%d)\n", i);

        // loop interno ‚Üí movimento horizontal
        for (int j = 1; j <= movimentoHorizontal; j++) {
            if (i == 1 && j == 1) {
                printf(">> Movimento em L completo!\n");
                break; // termina o loop interno ao completar o L
            }

            // exemplo de uso de continue
            if (j == 0) continue;

            printf("Direita (%d,%d)\n", i, j);
        }
    }
}

// ==============================
// üöÄ FUN√á√ÉO PRINCIPAL
// ==============================
int main() {
    // valores pr√©-definidos
    int casasTorre = 5;
    int casasBispoV = 3;
    int casasBispoH = 2;
    int casasRainha = 4;

    // -------------------------------------
    // TORRE
    printf("Movimento da TORRE:\n");
    moverTorre(casasTorre, 1);
    printf("\n");

    // -------------------------------------
    // BISPO
    printf("Movimento do BISPO:\n");
    moverBispo(casasBispoV, casasBispoH);
    printf("\n");

    // -------------------------------------
    // RAINHA
    printf("Movimento da RAINHA:\n");
    moverRainha(casasRainha, 1);
    printf("\n");

    // -------------------------------------
    // CAVALO
    moverCavalo();
    printf("\n");

    // -------------------------------------
    printf("üèÅ Fim da simula√ß√£o!\n");
    return 0;
}



